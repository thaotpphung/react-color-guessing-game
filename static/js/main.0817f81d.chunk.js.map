{"version":3,"sources":["components/Heading/Heading.jsx","components/ButtonList/Button/Button.jsx","components/ButtonList/ButtonList.jsx","components/Stripe/Stripe.jsx","components/SquareList/Square/Square.jsx","components/SquareList/SquareList.jsx","container/App.jsx","serviceWorker.js","index.js"],"names":["Heading","colorValue","headingColor","className","style","backgroundColor","Button","currentMode","mode","onButtonClick","classes","push","onClick","join","ButtonList","modes","map","i","key","label","event","Stripe","message","Square","color","onColorClick","SquareList","colors","App","props","state","winningColor","setState","fill","generateRandomColors","numSquares","pickWinner","r","g","b","Math","floor","random","length","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0817f81d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Heading.css\";\r\n\r\nconst Heading = ({colorValue, headingColor}) => {\r\n    return (\r\n      <div\r\n        className=\"heading\"\r\n        style={{ backgroundColor: headingColor }}\r\n      >\r\n        <h1>\r\n          The Great\r\n          <br/>\r\n          <span className=\"colorHeading\">{colorValue}</span>\r\n          <br/>\r\n          Color Game\r\n        </h1>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\nexport default Heading;\r\n","import React from \"react\";\nimport \"./Button.css\";\n\nconst Button = ({\n  currentMode,\n  mode,\n  onButtonClick\n}) => {\n  const classes = ['button'];\n  if (currentMode === mode) {\n    classes.push('selected')\n  }\n\n  return (\n    <button \n      onClick={onButtonClick} \n      className={classes.join(' ')}\n    >\n      {mode}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport Button from \"./Button/Button\";\n\nconst ButtonList = ({ currentMode, modes, onButtonClick}) => {\n  return (\n    <span className=\"buttonList\">\n      {\n        modes.map((mode, i) => {\n          return (\n            <Button\n              key={i}\n              mode={mode.label}\n              currentMode = {currentMode}\n              onButtonClick = {(event) => onButtonClick(event, mode)}\n            />\n          );\n        })\n      }\n    </span>\n  );\n}\n\nexport default ButtonList;\n","import React from \"react\";\r\nimport \"./Stripe.css\";\r\nimport \"../ButtonList/ButtonList\";\r\nimport ButtonList from \"../ButtonList/ButtonList\";\r\nimport Button from \"../ButtonList/Button/Button\";\r\n\r\n\r\nconst Stripe = ({currentMode, modes, message, onButtonClick}) => {\r\n    return (\r\n        <div className=\"stripe\">\r\n            <Button\r\n              key={10}\r\n              mode={'New Colors'}\r\n              currentMode = {currentMode}\r\n              onButtonClick = {(event) => onButtonClick(event, currentMode)}\r\n            />\r\n\r\n            <span className=\"message\">{message}</span>\r\n            <ButtonList\r\n                currentMode = {currentMode}\r\n                modes = {modes}\r\n                onButtonClick= {onButtonClick}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Stripe;\r\n","import React from \"react\";\r\nimport \"./Square.css\";\r\n\r\nconst Square = ({\r\n  color,\r\n  onColorClick\r\n}) => {\r\n  return (\r\n    <div \r\n      className=\"square\"\r\n      onClick={onColorClick}\r\n      style={{backgroundColor: color}}\r\n    >\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from 'react';\nimport \"./SquareList.css\";\n\nimport Square from \"./Square/Square\";\n\nconst SquareList = ({ colors, onColorClick}) => {\n  return (\n    <div className=\"squareList\">\n      {\n        colors.map((color, i) => {\n          return (\n            <Square\n              key={i}\n              color={color}\n              onColorClick = {(event) => onColorClick(event, color)}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default SquareList;\n","import React, { Component } from \"react\";\r\nimport Heading from \"../components/Heading/Heading\";\r\nimport Stripe from \"../components/Stripe/Stripe\";\r\nimport SquareList from \"../components/SquareList/SquareList\";\r\nimport \"./App.css\";\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // configure levels\r\n    this.state = {\r\n      message: \"\",\r\n      colors: [],\r\n      winningColor: '',\r\n      headingColor: '',\r\n      modes: [\r\n        {\r\n          label:'easy',\r\n          numSquares: 3\r\n         },\r\n         {\r\n          label: 'medium',\r\n          numSquares: 6\r\n         }, \r\n         {\r\n          label: 'hard',\r\n          numSquares: 9\r\n         },\r\n        //  {\r\n        //   label: 'superhard',\r\n        //   numSquares: 12\r\n        //  },\r\n        //  {\r\n        //   label: 'megahard',\r\n        //   numSquares: 15\r\n        //  },\r\n        //  {\r\n        //   label: 'ultrahard',\r\n        //   numSquares: 18\r\n        //  }\r\n        ],\r\n      currentMode: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.onButtonClick(null, {\r\n      label: 'medium',\r\n      numSquares: 6\r\n     }\r\n    );\r\n  }\r\n\r\n  onColorClick = (event, color) => {\r\n    if (color === this.state.winningColor) {\r\n      this.setState(\r\n        { \r\n          message: \"Correct!\",\r\n          headingColor: this.state.winningColor,\r\n          colors: this.state.colors.fill(this.state.winningColor)\r\n        }\r\n      );\r\n    } else {\r\n      this.setState(\r\n        { \r\n          message: \"Try Again!\",\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  onButtonClick = (event, mode) => {\r\n    const colors = this.generateRandomColors(mode.numSquares);\r\n    const winningColor = this.pickWinner(colors);\r\n    this.setState({ colors });\r\n    this.setState({ winningColor });\r\n    this.setState({ currentMode: mode.label });\r\n    this.setState({ message: \"Guess The Color\" });\r\n    this.setState({ headingColor: \"steelblue\" });\r\n  }\r\n  \r\n  //render The Color Game\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Heading\r\n          headingColor={this.state.headingColor}\r\n          colorValue={this.state.winningColor}\r\n        />\r\n        <Stripe\r\n          modes = {this.state.modes}\r\n          currentMode = {this.state.currentMode}\r\n          message = {this.state.message}\r\n          onButtonClick = {this.onButtonClick}\r\n        />\r\n        <SquareList\r\n          colors = {this.state.colors}\r\n          onColorClick = {this.onColorClick}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //generate a number of random colors and place into \"colors\" state, choose a random winning color\r\n  generateRandomColors = (numSquares) => {\r\n    let colors = [];\r\n    let r = \"\";\r\n    let g = \"\";\r\n    let b = \"\";\r\n    for (let i = 0; i < numSquares; i++) {\r\n      r = Math.floor(Math.random() * 256);\r\n      g = Math.floor(Math.random() * 256);\r\n      b = Math.floor(Math.random() * 256);\r\n      colors.push(\"rgb(\" + r + \", \" + g + \", \" + b + \")\");\r\n    }\r\n    return colors;\r\n  };\r\n\r\n  // pick a random color out of given colors as winning color\r\n  pickWinner = (colors) => {\r\n    return colors[Math.floor(Math.random() * colors.length)];\r\n  }\r\n\r\n}\r\n    \r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}